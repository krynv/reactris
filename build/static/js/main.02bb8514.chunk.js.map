{"version":3,"sources":["img/bg.png","components/styles/StyledStage.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","gameHelpers.js","components/styles/StyledTetris.js","hooks/usePlayer.js","hooks/useStage.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledStage","styled","div","props","height","width","StyledCell","colour","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","Math","floor","random","length","React","memo","Stage","stage","map","row","cell","x","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetromino","pos","StyledTetrisWrapper","bgImage","StyledTetris","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02bb8514.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.c96ae995.png\";","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.colour}, 0.8);\r\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n  border-bottom-color: rgba(${props => props.colour}, 0.1);\r\n  border-right-color: rgba(${props => props.colour}, 1);\r\n  border-top-color: rgba(${props => props.colour}, 1);\r\n  border-left-color: rgba(${props => props.colour}, 0.3);\r\n`","export const TETROMINOS = {\r\n    0: { //clean cell (when we're not shwoing any cells)\r\n        shape: [[0]],\r\n        colour: '0, 0, 0'\r\n    },\r\n    I: { // the long one\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n        ],\r\n        colour: '80, 227, 230'\r\n    },\r\n\r\n    J: { // the J looking one\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0],\r\n        ],\r\n        colour: '36, 95, 223'\r\n    },\r\n\r\n    L: { // the L looking one\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L'],\r\n        ],\r\n        colour: '223, 173, 36'\r\n    },\r\n\r\n    O: { // the O/ cube looking one\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O']\r\n        ],\r\n        colour: '223, 217, 36'\r\n    },\r\n\r\n    S: { // the S looking one\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        colour: '48, 211, 56'\r\n    },\r\n\r\n    T: { // the T looking one\r\n        shape: [\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        colour: '132, 61, 198'\r\n    },\r\n\r\n    Z: { // the Z looking one\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0],\r\n        ],\r\n        colour: '227, 68, 78'\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randomTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randomTetromino];\r\n\r\n}","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} colour={TETROMINOS[type].colour} />\r\n)\r\n\r\nexport default React.memo(Cell); // memoise the cell component, only render the cells when they change","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center; \r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? 'red' : '#999')};\r\n  background: #000;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>\r\n        {text}\r\n    </StyledDisplay>\r\n);\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n  box-sizing: border-box;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-family: Pixel, Arial, Helvetica, sans-serif;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => // create new array based on stage height\r\n    Array.from(Array(STAGE_HEIGHT), () => // for each row of the array, create a new array with our cells\r\n        new Array(STAGE_WIDTH).fill([0, 'clear']) // fill them with a clean cell, no blocks have collided with this cell\r\n    )\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n    for (let y = 0; y < player.tetromino.length; y += 1) {\r\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n            // 1. Check that we're on an actual Tetromino cell\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (\r\n                    // 2. Check that our move is inside the game areas height (y)\r\n                    // We shouldn't go through the bottom of the play area\r\n                    !stage[y + player.pos.y + moveY] ||\r\n                    // 3. Check that our move is inside the game areas width (x)\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    // 4. Check that the cell wer'e moving to isn't set to clear\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n                    'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n\r\n    // ES6 way\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // we need to transpose and make the rows into columns\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index]),\r\n        );\r\n\r\n        // now we reverse each of these rows to get a rotation matrix\r\n        if (dir > 0) {\r\n            return rotatedTetro.map(row => row.reverse());\r\n        }\r\n\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        // save our current position\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n\r\n        // vertically check if we are colliding with anything (continuously) - does the 'pushing' away from wall - for example\r\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n        setPlayer(clonedPlayer);\r\n    };\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false,\r\n        })\r\n    }, [])\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n\r\n    // create a clean board for us to use\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        setRowsCleared(0);\r\n\r\n\r\n        // implicit return, we don't need braces\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((ack, row) => {\r\n\r\n                // if we find a matching row to be cleared (check if we find a 0 value) - if the entire row has been filled with blocks\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n\r\n                    // add new value to array, at the beginning of the array (removing the old one)\r\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear'])); // create a new array and fill it with an empty array\r\n                    return ack;\r\n                }\r\n\r\n                ack.push(row);\r\n                return ack;\r\n\r\n            }, []); // give it an empty array to begin with\r\n\r\n\r\n        const updateStage = prevStage => {\r\n            // clear the state\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // draw our shape\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ];\r\n                    }\r\n                });\r\n            });\r\n            // check if we've hit something below\r\n            if (player.collided) {\r\n                resetPlayer();\r\n\r\n                // this will return any new rows, already checking if we have any rows to be cleared\r\n                return sweepRows(newStage);\r\n            }\r\n\r\n            return newStage;\r\n        };\r\n\r\n        setStage(prev => updateStage(prev));\r\n\r\n    }, [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowsCleared];\r\n};","import React, { useState } from 'react';\r\n\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n\r\nconst Tetris = () => {\r\n\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false); // not game over when we start the game\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    console.log('re-render');\r\n\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        console.log(\"test\")\r\n        // reset game\r\n        setStage(createStage());\r\n        setDropTime(1000); // 1 second\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const drop = () => {\r\n\r\n        // we want to increase the level when player has cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n\r\n            // and increase the speed as well\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false })\r\n        } else {\r\n            // game over\r\n            if (player.pos.y < 1) {\r\n                console.log(\"GAME OVER\");\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40) { // down key\r\n                console.log(`interval on`);\r\n                setDropTime(1000 / (level + 1) + 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        console.log(`interval off`);\r\n        // stop interval when player pressed the down key\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) { // left arrow\r\n                movePlayer(-1); // move to the left\r\n            }\r\n            else if (keyCode === 39) { // right arrow\r\n                movePlayer(1); // move to the left\r\n            }\r\n            else if (keyCode === 40) { // down arrow\r\n                dropPlayer(); // drop the block\r\n            }\r\n            else if (keyCode === 38) { // up arrow - for rotate\r\n                playerRotate(stage, 1); // rotate the shape clockwise\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime)\r\n\r\n    return (\r\n        // making it so that we can use keys everywhere otherwise it will mean that we will have to click on the screen to move with arrow keys\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ) : (\r\n                            <div>\r\n                                <Display text={`Score: ${score}`} />\r\n                                <Display text={`Rows: ${rows}`} />\r\n                                <Display text={`Level: ${level}`} />\r\n                            </div>\r\n                        )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper >\r\n    );\r\n};\r\n\r\nexport default Tetris;","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    // original tetris game scores: one row clearned, two rows cleared ..\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    // make sure we don't go into an infinite loop\r\n    const calcScore = useCallback(() => {\r\n\r\n        // we should calculate a score if we have cleared a score\r\n        if (rowsCleared > 0) {\r\n            // og tetris forumla\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]); // will not go into an infinity loop because this method will only get triggered when any of these values change\r\n\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => {\n                clearInterval(id);\n            };\n        }\n    }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => ( //using implicit return\n    <div className=\"App\">\n        <Tetris />\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}